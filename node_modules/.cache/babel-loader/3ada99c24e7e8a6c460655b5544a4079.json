{"ast":null,"code":"var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar assign = Object.assign || function assign(target, source) {\n  var keys = getAllKeys(source);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ? function (obj) {\n  return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));\n} : function (obj) {\n  return Object.keys(obj);\n};\n\nfunction copy(object) {\n  if (object instanceof Array) {\n    return object.slice();\n  } else if (object && typeof object === 'object') {\n    return assign(new object.constructor(), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n\n  update.extend = function (directive, fn) {\n    commands[directive] = fn;\n  };\n\n  return update;\n\n  function update(object, spec) {\n    invariant(!Array.isArray(spec), 'update(): You provided an invalid spec to update(). The spec may ' + 'not contain an array except as the value of $set, $push, $unshift, ' + '$splice or any custom command allowing an array value.');\n    invariant(typeof spec === 'object' && spec !== null, 'update(): You provided an invalid spec to update(). The spec and ' + 'every included key path must be plain objects containing one of the ' + 'following commands: %s.', Object.keys(commands).join(', '));\n    var nextObject = object;\n    var specKeys = getAllKeys(spec);\n    var index, key;\n\n    for (index = 0; index < specKeys.length; index++) {\n      var key = specKeys[index];\n\n      if (hasOwnProperty.call(commands, key)) {\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n      } else {\n        var nextValueForKey = update(object[key], spec[key]);\n\n        if (nextValueForKey !== nextObject[key]) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n\n          nextObject[key] = nextValueForKey;\n        }\n      }\n    }\n\n    return nextObject;\n  }\n}\n\nvar defaultCommands = {\n  $push: function $push(value, original, spec) {\n    invariantPushAndUnshift(original, spec, '$push');\n    return original.concat(value);\n  },\n  $unshift: function $unshift(value, original, spec) {\n    invariantPushAndUnshift(original, spec, '$unshift');\n    return value.concat(original);\n  },\n  $splice: function $splice(value, nextObject, spec, object) {\n    var originalValue = nextObject === object ? copy(object) : nextObject;\n    invariantSplices(originalValue, spec);\n    value.forEach(function (args) {\n      invariantSplice(args);\n      splice.apply(originalValue, args);\n    });\n    return originalValue;\n  },\n  $set: function $set(value, original, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $merge: function $merge(value, nextObject, spec, object) {\n    var originalValue = nextObject === object ? copy(object) : nextObject;\n    invariantMerge(originalValue, value);\n    getAllKeys(value).forEach(function (key) {\n      originalValue[key] = value[key];\n    });\n    return originalValue;\n  },\n  $apply: function $apply(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\nmodule.exports = newContext();\nmodule.exports.newContext = newContext; // invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n  var specValue = spec[command];\n  invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue);\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(Array.isArray(value), 'Expected $splice target to be an array; got %s', value);\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(Array.isArray(value), 'update(): expected spec of $splice to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', value);\n}\n\nfunction invariantApply(fn) {\n  invariant(typeof fn === 'function', 'update(): expected spec of $apply to be a function; got %s.', fn);\n}\n\nfunction invariantSet(spec) {\n  invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with $set');\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(specValue && typeof specValue === 'object', 'update(): $merge expects a spec of type \\'object\\'; got %s', specValue);\n  invariant(target && typeof target === 'object', 'update(): $merge expects a target of type \\'object\\'; got %s', target);\n}","map":null,"metadata":{},"sourceType":"script"}