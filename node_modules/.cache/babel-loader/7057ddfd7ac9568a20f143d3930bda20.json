{"ast":null,"code":"import _classCallCheck from \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/src/components/wrappers/KeyStrokeHandler.js\";\nimport React, { Component } from 'react';\nimport { getNextModeByKey } from '../../services/mode';\nimport { wrapChildrenWith } from '../../util/common';\n\nvar KeyStrokeHandler = /*#__PURE__*/function (_Component) {\n  _inherits(KeyStrokeHandler, _Component);\n\n  function KeyStrokeHandler() {\n    _classCallCheck(this, KeyStrokeHandler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(KeyStrokeHandler).apply(this, arguments));\n  }\n\n  _createClass(KeyStrokeHandler, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      window.addEventListener('keydown', this.handleKeyUp.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.handleKeyUp);\n    }\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(e) {\n      var mode = this.props.data.mode;\n      var nextMode = getNextModeByKey(mode, e.keyCode);\n\n      if (nextMode !== mode) {\n        e.preventDefault();\n        this.props.actions.changeMode(nextMode);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 16\n        }\n      }, wrapChildrenWith(this.props.children, this.props));\n    }\n  }]);\n\n  return KeyStrokeHandler;\n}(Component);\n\nexport default KeyStrokeHandler;","map":{"version":3,"sources":["/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/src/components/wrappers/KeyStrokeHandler.js"],"names":["React","Component","getNextModeByKey","wrapChildrenWith","KeyStrokeHandler","window","addEventListener","handleKeyUp","bind","removeEventListener","e","mode","props","data","nextMode","keyCode","preventDefault","actions","changeMode","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,gBAAR,QAA+B,qBAA/B;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;;IAEMC,gB;;;;;;;;;;;yCACmB;AACjBC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnC;AACH;;;2CAEsB;AACnBH,MAAAA,MAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsC,KAAKF,WAA3C;AACH;;;gCAEWG,C,EAAG;AAAA,UACJC,IADI,GACI,KAAKC,KAAL,CAAWC,IADf,CACJF,IADI;AAEX,UAAMG,QAAQ,GAAGZ,gBAAgB,CAACS,IAAD,EAAOD,CAAC,CAACK,OAAT,CAAjC;;AAEA,UAAID,QAAQ,KAAKH,IAAjB,EAAuB;AACnBD,QAAAA,CAAC,CAACM,cAAF;AACA,aAAKJ,KAAL,CAAWK,OAAX,CAAmBC,UAAnB,CAA8BJ,QAA9B;AACH;AACJ;;;6BAEQ;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMX,gBAAgB,CAAC,KAAKS,KAAL,CAAWO,QAAZ,EAAsB,KAAKP,KAA3B,CAAtB,CAAP;AACH;;;;EArB0BX,S;;AAwB/B,eAAeG,gBAAf","sourcesContent":["import React, {Component} from 'react';\nimport {getNextModeByKey} from '../../services/mode';\nimport {wrapChildrenWith} from '../../util/common';\n\nclass KeyStrokeHandler extends Component {\n    componentWillMount() {\n        window.addEventListener('keydown', this.handleKeyUp.bind(this));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyUp);\n    }\n\n    handleKeyUp(e) {\n        const {mode} = this.props.data;\n        const nextMode = getNextModeByKey(mode, e.keyCode);\n\n        if (nextMode !== mode) {\n            e.preventDefault();\n            this.props.actions.changeMode(nextMode);\n        }\n    }\n\n    render() {\n        return <div>{wrapChildrenWith(this.props.children, this.props)}</div>;\n    }\n}\n\nexport default KeyStrokeHandler;\n"]},"metadata":{},"sourceType":"module"}