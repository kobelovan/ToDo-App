{"ast":null,"code":"import KeyCode from 'keycode-js';\nimport { compose, withState, withHandlers } from 'recompose';\nexport default compose(withState('value', 'setValue', function (props) {\n  console.log('got props', props);\n  return props.value || '';\n}), withHandlers({\n  handleKeyUp: function handleKeyUp(_ref) {\n    var addNew = _ref.addNew,\n        setValue = _ref.setValue;\n    return function (e) {\n      var text = e.target.value.trim();\n\n      if (e.keyCode === KeyCode.KEY_RETURN && text) {\n        addNew(text);\n        setValue('');\n      }\n    };\n  },\n  handleChange: function handleChange(_ref2) {\n    var setValue = _ref2.setValue;\n    return function (e) {\n      setValue(e.target.value);\n    };\n  }\n}));","map":{"version":3,"sources":["/Users/kobelovan/Desktop/workspace/React-TODO-App-DDExample/src/components/hoc/wrapInputBox.js"],"names":["KeyCode","compose","withState","withHandlers","props","console","log","value","handleKeyUp","addNew","setValue","e","text","target","trim","keyCode","KEY_RETURN","handleChange"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,YAA7B,QAAiD,WAAjD;AAEA,eAAeF,OAAO,CAClBC,SAAS,CAAC,OAAD,EAAU,UAAV,EAAsB,UAAAE,KAAK,EAAI;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACA,SAAOA,KAAK,CAACG,KAAN,IAAe,EAAtB;AACH,CAHQ,CADS,EAKlBJ,YAAY,CAAC;AACTK,EAAAA,WAAW,EAAE;AAAA,QAAGC,MAAH,QAAGA,MAAH;AAAA,QAAWC,QAAX,QAAWA,QAAX;AAAA,WAA0B,UAAAC,CAAC,EAAI;AACxC,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASN,KAAT,CAAeO,IAAf,EAAb;;AAEA,UAAIH,CAAC,CAACI,OAAF,KAAcf,OAAO,CAACgB,UAAtB,IAAoCJ,IAAxC,EAA8C;AAC1CH,QAAAA,MAAM,CAACG,IAAD,CAAN;AACAF,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,KAPY;AAAA,GADJ;AASTO,EAAAA,YAAY,EAAE;AAAA,QAAGP,QAAH,SAAGA,QAAH;AAAA,WAAkB,UAAAC,CAAC,EAAI;AACjCD,MAAAA,QAAQ,CAACC,CAAC,CAACE,MAAF,CAASN,KAAV,CAAR;AACH,KAFa;AAAA;AATL,CAAD,CALM,CAAtB","sourcesContent":["import KeyCode from 'keycode-js';\nimport { compose, withState, withHandlers } from 'recompose';\n\nexport default compose(\n    withState('value', 'setValue', props => {\n        console.log('got props', props);\n        return props.value || ''\n    }),\n    withHandlers({\n        handleKeyUp: ({ addNew, setValue }) => e => {\n            const text = e.target.value.trim();\n\n            if (e.keyCode === KeyCode.KEY_RETURN && text) {\n                addNew(text);\n                setValue('');\n            }\n        },\n        handleChange: ({ setValue }) => e => {\n            setValue(e.target.value);\n        }\n    })\n);\n"]},"metadata":{},"sourceType":"module"}